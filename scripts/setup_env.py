#!/usr/bin/env python3
"""
Setup script for environment variables.
Helps create and validate the .env file with all required variables.
"""

import os
from pathlib import Path

def create_env_file():
    """Create .env file with all required variables."""
    
    env_file = Path(".env")
    
    # Required environment variables with descriptions
    required_vars = {
        "ANTHROPIC_API_KEY": "Your Anthropic API key for Claude (required for AI features)",
        "POSTGRES_USER": "PostgreSQL username (default: valorant_user)",
        "POSTGRES_PASSWORD": "PostgreSQL password (default: valorant_pass)", 
        "POSTGRES_DB": "PostgreSQL database name (default: valorant_tracker)",
        "POSTGRES_PORT": "PostgreSQL port (default: 5432)",
        "API_PORT": "API server port (default: 8000)",
        "FLARESOLVERR_PORT": "FlareSolverr port (default: 8191)",
        "FLARESOLVERR_LOG_LEVEL": "FlareSolverr log level (default: info)",
        "FLARESOLVERR_LOG_HTML": "FlareSolverr HTML logging (default: false)",
        "FLARESOLVERR_CAPTCHA_SOLVER": "FlareSolverr captcha solver (default: none)",
        "TIMEZONE": "System timezone (default: UTC)"
    }
    
    # Default values
    defaults = {
        "POSTGRES_USER": "valorant_user",
        "POSTGRES_PASSWORD": "valorant_pass",
        "POSTGRES_DB": "valorant_tracker", 
        "POSTGRES_PORT": "5432",
        "API_PORT": "8000",
        "FLARESOLVERR_PORT": "8191",
        "FLARESOLVERR_LOG_LEVEL": "info",
        "FLARESOLVERR_LOG_HTML": "false",
        "FLARESOLVERR_CAPTCHA_SOLVER": "none",
        "TIMEZONE": "UTC"
    }
    
    print("üîß Setting up environment variables...")
    
    # Check if .env file exists
    if env_file.exists():
        print(f"üìÅ Found existing .env file at {env_file}")
        
        # Read existing variables
        existing_vars = {}
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
        
        print(f"üìù Found {len(existing_vars)} existing variables")
        
        # Check for missing variables
        missing_vars = []
        for var in required_vars:
            if var not in existing_vars:
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ö†Ô∏è  Missing variables: {', '.join(missing_vars)}")
            
            # Ask if user wants to add them
            response = input("Add missing variables? (y/N): ").lower().strip()
            if response in ['y', 'yes']:
                add_missing_vars(env_file, existing_vars, missing_vars, required_vars, defaults)
            else:
                print("Skipping missing variables")
        else:
            print("‚úÖ All required variables are present")
            
        # Validate critical variables
        validate_env_vars(existing_vars)
        
    else:
        print(f"üìÑ Creating new .env file at {env_file}")
        create_new_env_file(env_file, required_vars, defaults)
    
    print("\nüöÄ Environment setup complete!")
    print("\nüìñ Next steps:")
    print("1. Make sure your ANTHROPIC_API_KEY is set correctly")
    print("2. Run: docker compose up")
    print("3. Access the API at http://localhost:8000/dashboard")

def add_missing_vars(env_file, existing_vars, missing_vars, required_vars, defaults):
    """Add missing variables to existing .env file."""
    
    with open(env_file, 'a') as f:
        f.write("\n# Added by setup script\n")
        
        for var in missing_vars:
            description = required_vars[var]
            default_value = defaults.get(var, "")
            
            print(f"\nüìù {var}")
            print(f"   Description: {description}")
            
            if var == "ANTHROPIC_API_KEY":
                value = input(f"   Enter your API key: ").strip()
                if not value:
                    print("   ‚ö†Ô∏è  Warning: ANTHROPIC_API_KEY is required for AI features!")
                    value = "YOUR_API_KEY_HERE"
            else:
                if default_value:
                    value = input(f"   Enter value (default: {default_value}): ").strip()
                    if not value:
                        value = default_value
                else:
                    value = input(f"   Enter value: ").strip()
            
            f.write(f"{var}={value}\n")
            print(f"   ‚úÖ Set {var}={value}")

def create_new_env_file(env_file, required_vars, defaults):
    """Create a new .env file from scratch."""
    
    with open(env_file, 'w') as f:
        f.write("# Valorant Tracker API Environment Variables\n")
        f.write("# Generated by setup script\n\n")
        
        # Group variables by category
        f.write("# API Configuration\n")
        anthropic_key = input("Enter your Anthropic API key (required): ").strip()
        if not anthropic_key:
            anthropic_key = "YOUR_API_KEY_HERE"
            print("‚ö†Ô∏è  Warning: You must set a valid ANTHROPIC_API_KEY!")
        
        f.write(f"ANTHROPIC_API_KEY={anthropic_key}\n\n")
        
        f.write("# Database Configuration\n")
        for var in ["POSTGRES_USER", "POSTGRES_PASSWORD", "POSTGRES_DB", "POSTGRES_PORT"]:
            value = defaults[var]
            f.write(f"{var}={value}\n")
        
        f.write("\n# Service Ports\n")
        f.write(f"API_PORT={defaults['API_PORT']}\n")
        f.write(f"FLARESOLVERR_PORT={defaults['FLARESOLVERR_PORT']}\n")
        
        f.write("\n# FlareSolverr Configuration\n") 
        for var in ["FLARESOLVERR_LOG_LEVEL", "FLARESOLVERR_LOG_HTML", "FLARESOLVERR_CAPTCHA_SOLVER"]:
            value = defaults[var]
            f.write(f"{var}={value}\n")
        
        f.write("\n# System Configuration\n")
        f.write(f"TIMEZONE={defaults['TIMEZONE']}\n")
    
    print(f"‚úÖ Created {env_file}")

def validate_env_vars(existing_vars):
    """Validate critical environment variables."""
    
    print("\nüîç Validating environment variables...")
    
    # Check ANTHROPIC_API_KEY
    api_key = existing_vars.get("ANTHROPIC_API_KEY", "")
    if not api_key or api_key == "YOUR_API_KEY_HERE":
        print("‚ùå ANTHROPIC_API_KEY is not set properly!")
        print("   Get your API key from: https://console.anthropic.com/")
        print("   Then update your .env file")
    else:
        if api_key.startswith("sk-ant-"):
            print("‚úÖ ANTHROPIC_API_KEY format looks correct")
        else:
            print("‚ö†Ô∏è  ANTHROPIC_API_KEY format might be incorrect (should start with 'sk-ant-')")
    
    # Check database settings
    if existing_vars.get("POSTGRES_PASSWORD") == "valorant_pass":
        print("‚ö†Ô∏è  Using default database password (consider changing for production)")
    
    # Check ports
    api_port = existing_vars.get("API_PORT", "8000")
    if api_port != "8000":
        print(f"‚ÑπÔ∏è  API will be available on port {api_port}")

def check_existing_env():
    """Check if .env file exists and is properly configured."""
    
    env_file = Path(".env")
    if not env_file.exists():
        return False
    
    required_vars = ["ANTHROPIC_API_KEY"]
    existing_vars = {}
    
    with open(env_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                existing_vars[key] = value
    
    missing = [var for var in required_vars if var not in existing_vars or not existing_vars[var]]
    
    if missing:
        print(f"‚ùå Missing required variables: {', '.join(missing)}")
        return False
    
    print("‚úÖ Environment variables look good!")
    return True

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Setup environment variables for Valorant Tracker API")
    parser.add_argument("--check", action="store_true", help="Check existing .env file")
    parser.add_argument("--force", action="store_true", help="Force recreation of .env file")
    
    args = parser.parse_args()
    
    if args.check:
        check_existing_env()
    else:
        if args.force and Path(".env").exists():
            os.remove(".env")
            print("üóëÔ∏è  Removed existing .env file")
        
        create_env_file() 