services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tracker-api
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-valorant_user}:${POSTGRES_PASSWORD:-valorant_pass}@postgres:5432/${POSTGRES_DB:-valorant_tracker}
      - FLARESOLVERR_URL=http://flaresolverr:8191
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      flaresolverr:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - internal
    volumes:
      - ./data:/app/data  # Mount data directory for JSON files

  # Data ingestion service (can be used for one-time operations)
  ingestion:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tracker-ingestion
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-valorant_user}:${POSTGRES_PASSWORD:-valorant_pass}@postgres:5432/${POSTGRES_DB:-valorant_tracker}
      - FLARESOLVERR_URL=http://flaresolverr:8191
    depends_on:
      flaresolverr:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - internal
    volumes:
      - ./data:/app/data  # Mount data directory for JSON files
    profiles:
      - ingestion  # Only start with --profile ingestion
    command: ["python", "-m", "src", "ingest", "--init-db"]  # Can be overridden

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: tracker-flaresolverr
    ports:
      - "${FLARESOLVERR_PORT:-8191}:8191"
    environment:
      - LOG_LEVEL=${FLARESOLVERR_LOG_LEVEL:-info}
      - LOG_HTML=${FLARESOLVERR_LOG_HTML:-false}
      - CAPTCHA_SOLVER=${FLARESOLVERR_CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE:-UTC}
    restart: unless-stopped
    networks:
      - internal

  postgres:
    image: postgres:15-alpine
    container_name: tracker-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-valorant_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-valorant_pass}
      - POSTGRES_DB=${POSTGRES_DB:-valorant_tracker}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d  # For initialization scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-valorant_user} -d ${POSTGRES_DB:-valorant_tracker}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  internal:
    external: false

volumes:
  postgres_data:
    driver: local
